{
  "name": "T-Rex Runner",
  "tagline": "Final project",
  "body": "### Welcome to the T-Rex Runner project.\r\nThis is the final project for my Java course. You can download the [source](https://github.com/FracturedCodes/trexRunner/zipball/master) to compile and run it with `javac -g trexRunner.java && java trexRunner` (assuming you have [jre](java.com/download) and the [jdk](http://www.oracle.com/technetwork/java/javase/downloads/index.html).) Or you can follow this nifty tutorial and learn how to make your own!\r\n\r\n### Resources you will need:\r\n - [java runtime env](java.com/download)\r\n - [java dev kit](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\r\n - The pictures for the game (best download the [source](https://github.com/FracturedCodes/trexRunner/zipball/master))\r\n - A good text editor or IDE (I personally use [Sublime Text](https://www.sublimetext.com/))\r\n\r\n### To begin:\r\n 1. Good practice is to create a separate folder for your project, so go ahead and do that.\r\n 2. Open up your text editor and create a new file named `trexRunner.java`.\r\n 3. Import the necessary classes we will be using, in this case\r\n```\r\nimport javafx.application.Application;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.FontWeight;\r\nimport javafx.animation.AnimationTimer;\r\nimport javafx.event.EventHandler;\r\nimport javafx.scene.input.KeyEvent;\r\n```\r\n4. Create the main class we will be working with. Since this is going to be a JavaFX application, the class should extend `javafx.application.Application`.\r\n\r\n```\r\npublic class trexRunner extends Application {}\r\n```\r\n\r\n### Follow along...\r\nJavaFX applications follow a pretty easy to understand pattern:\r\n\r\n - The main class launches (`launch()`) the application\r\n - The `init()` method is called\r\n - The `start()` method is called\r\n - `stop()` is called when the program needs to exit\r\n\r\nThe `start()` method is where we will be doing most of our magic. A stage is a JavaFX container. Stages control basic window properties. Each time an application is run, a stage is created and passed to the `start()` method. After stages have been configured, they are made visible with the `show()` method (stage.show().) So to start out we'll make a very basic application.\r\n```\r\npublic class trexRunner extends Application {\r\n    public static void main (String[] args) {\r\n        launch(args);        // Launch the application\r\n    }\r\n    @Override                // Start is an abstract method from Application, so we will define it\r\n    public void start(Stage gameStage) {\r\n        gameStage.setTitle(\"T-Rex Runner\");    // Set the window title\r\n        gameStage.show();                      // Show the window\r\n    }\r\n}\r\n```\r\nCompile and run the program with `javac -g trexRunner.java && java trexRunner`. If all goes well, you should see a blank, white window with the title \"T-Rex Runner.\"\r\n\r\n### The magic begins...\r\n`start()` is basically where our game happens; from here on out we will not touch anything else much.\r\nTo save space we will show only `start()`.\r\n\r\nThere may have been a short moment of triumph after you ran that program, but it was very brief; It's very boring! But considering that we only need 12 lines of code (after removing unnecessary packages), JavaFX is a very easy option as opposed to some other low-level options, but there are definitely some disadvantages as opposed to using other graphics libraries *cough*OpenGL*cough*. Let's make this a little less boring, and _start()_ ;) making the game (pun intended.)\r\n(Note: If you see code blocks and don't know where to put them, they probably go in `start()`.)\r\n\r\nJavaFX is organized in a tree-like structure, starting with the root, and \"branching out\" to other nodes. Every node that is configured in some way also applies to any child nodes. Start by adding this between `setTitle()` and `show()`:\r\n\r\n```\r\nGroup root = new Group();          // Creates a new group\r\nScene gameScene = new Scene(root); // The scene uses the tree \"root\"\r\ngameStage.setScene(gameScene);     // The stage uses the scene\r\n\r\nCanvas gameCanvas = new Canvas(800, 230);// The canvas is created, the constructor params indicate size in (x, y)\r\nroot.getChildren().add(gameCanvas);// The canvas is added as a node in the root tree\r\n```\r\n\r\nThis sets up the tree and ties it to the window. The canvas is created and in turn the window size is set. Now we'll draw the game, after the last code block, add this (still in between setTitle and show):\r\n\r\n```\r\nGraphicsContext gc = gameCanvas.getGraphicsContext2D();      // Creates a graphics context so we can edit the canvas\r\nString ground = \"________________________________________________________________\";// This string will be the ground for the dinosaur\r\ngc.setFill(Color.BLACK);                   // Set the fill color to black\r\ngc.setLineWidth(2);                        // The thickness of lines will be 2\r\nFont gameFont = Font.font(\"Times New Roman\", FontWeight.LIGHT, 20);// For now we will use Times New Roman\r\ngc.setFont(gameFont);                      // This tells the graphics context to use Times New Roman\r\ngc.fillText(ground, 80, 160);              // Now we draw the ground in TNR at 80 (pixels) right, 160 down\r\n\r\nImage trex = new Image(\"trex.png\");        // Load images of trex and cactus\r\nImage cactus = new Image(\"cactus.png\");\r\ngc.drawImage(trex, 80, 100);               // Now draw the images to the canvas\r\ngc.drawImage(cactus, 300, 110);\r\n```\r\n\r\nCompile and run the program... What happens? Your likely answer was \"I see a picture, then nothing happens.\" If this was not your answer, backtrack and check for mistakes. What you should have seen was a long window. Inside this window should have been a trex, a cactus, and a flat ground. Pretty boring, huh. At this point, your code should look something like this:\r\n\r\n```\r\n@Override\r\npublic void start(Stage gameStage) {\r\n    gameStage.setTitle(\"T-Rex Runner\");\r\n    \r\n    Group root = new Group();        \r\n    Scene gameScene = new Scene(root); \r\n    gameStage.setScene(gameScene);     \r\n\r\n    Canvas gameCanvas = new Canvas(800, 230);\r\n    root.getChildren().add(gameCanvas);\r\n\r\n    GraphicsContext gc = gameCanvas.getGraphicsContext2D();      \r\n    String ground = \"________________________________________________________________\";\r\n    gc.setFill(Color.BLACK);    \r\n    gc.setLineWidth(2);                        \r\n    Font gameFont = Font.font(\"Times New Roman\", FontWeight.LIGHT, 20);\r\n    gc.setFont(gameFont);                 \r\n    gc.fillText(ground, 80, 160);              \r\n\r\n    Image trex = new Image(\"trex.png\");      \r\n    Image cactus = new Image(\"cactus.png\");\r\n    gc.drawImage(trex, 80, 100);         \r\n    gc.drawImage(cactus, 300, 110);\r\n\r\n    gameStage.show();\r\n}\r\n```\r\n\r\nNow we can start making this a _game_; all games have to be dynamic, and so far this one isn't.\r\nTo be dynamic games use what is called a game loop. Game loops are exactly that. They're loops. To make our game loop, we'll create an `AnimationTimer`: `new AnimationTimer() {}.start();`\r\n\r\nFor now it'll be fine if we can get the dinosaur moving. It doesn't matter if it can hit cacti or jump we just need to get in moving. To get the dinosaur moving, we are going to move the cactus. This gives the illusion that the T-Rex is moving and we're moving with the t-rex. This is a bit tricky. We could be lazy and have animations handled frame-by-frame, but this can cause timing problems and unpredictability. To handle this we need a sense of time, not a frame counter. This is generally done by utilizing time in nanoseconds.\r\n\r\n```\r\nnew AnimationTimer() {\r\n    public void handle(long currentNanoTime) {\r\n    }\r\n}.start();\r\n```\r\n\r\nEvery time the timer loops, it calls the `handle(nanoTime)` function and gives it the current time in nanoseconds. The idea is to *time* the animations, not to make everything frame by frame. A nanosecond is 1 trillionth of a second, and if we're aiming for around 60 frames per second, the threshold for updating the positon of the cactus is every 16,666,666 nanoseconds.\r\n\r\n```\r\nnew AnimationTimer() {\r\n    long lastNanoTime = System.nanoTime();     // Records the time in nanoseconds\r\n    int cactusX = 800;                         // Tells what X value the cactus should start on\r\n    public void handle(long currentNanoTime) {\r\n        long t = (currentNanoTime - lastNanoTime);// t is a representation of how many nanoseconds have passed since the last frame\r\n        if (t >= 16666666) {          // The if checks if enough time has passed for another frame, if not then the timer loops again\r\n            while (t >= 16666666) {   // This while loop adjusts the cactus until it makes up for lost time\r\n                cactusX -= 5;\r\n                t -= 16666666;\r\n            }\r\n            gc.clearRect(0, 0, 800, 230);// Clears the canvas\r\n            gc.fillText(ground, 80, 160);//Draw the ground, the trex and cactus\r\n\t    gc.drawImage(trex, 80, 100);\r\n            gc.drawImage(cactus, cactusX, 110);// Draws cactus on x value calculated in the while loop\r\n            lastNanoTime = System.nanoTime();  // Updates the nano time to the frame just drawn\r\n        }\r\n    }\r\n}.start();\r\n```\r\n\r\nOnce you compile and run that try adjusting the nano second values in the if and while statements. If the framerate is a bit choppy, increase or lower the value from 16666666. Mess around until you see what works.  Be aware that this will affect the speed of the cactus, so you might also want to adjust the `cactusX -= 5;` statement in the while loop.\r\n\r\n### Huzzah! A wild cactus appears!\r\nIf you haven't been having the best of luck, try this source code, which is what we've done up to this point.\r\n\r\n```\r\nimport javafx.application.Application;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.FontWeight;\r\nimport javafx.animation.AnimationTimer;\r\nimport javafx.event.EventHandler;\r\nimport javafx.scene.input.KeyEvent;\r\n\r\npublic class trexRunner extends Application {\r\n\tpublic static void main(String[] args) {\r\n\t\tlaunch(args);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void start(Stage gameStage) {\r\n\t    gameStage.setTitle(\"T-Rex Runner\");\r\n\t    \r\n\t    Group root = new Group();        \r\n\t    Scene gameScene = new Scene(root); \r\n\t    gameStage.setScene(gameScene);     \r\n\r\n\t    Canvas gameCanvas = new Canvas(800, 230);\r\n\t    root.getChildren().add(gameCanvas);\r\n\r\n\t    GraphicsContext gc = gameCanvas.getGraphicsContext2D();      \r\n\t    String ground = \"________________________________________________________________\";\r\n\t    gc.setFill(Color.BLACK);    \r\n\t    gc.setLineWidth(2);                        \r\n\t    Font gameFont = Font.font(\"Times New Roman\", FontWeight.LIGHT, 20);\r\n\t    gc.setFont(gameFont);                 \r\n\t    gc.fillText(ground, 80, 160);              \r\n\r\n\t    Image trex = new Image(\"trex.png\");      \r\n\t    Image cactus = new Image(\"cactus.png\");\r\n\t    gc.drawImage(trex, 80, 100);         \r\n\t    gc.drawImage(cactus, 300, 110);\r\n\r\n\t    new AnimationTimer() {\r\n\t\t    long lastNanoTime = System.nanoTime();\r\n\t\t    int cactusX = 800;\r\n\t\t    public void handle(long currentNanoTime) {\r\n\t\t        long t = (currentNanoTime - lastNanoTime);\r\n\t\t        if (t >= 16666666) {\r\n\t\t            while (t >= 16666666) {\r\n\t\t                cactusX -= 5;\r\n\t\t                t -= 16666666;\r\n\t\t            }\r\n\t\t            gc.clearRect(0, 0, 800, 230);\r\n\t\t            gc.fillText(ground, 80, 160);\r\n\t\t\t    gc.drawImage(trex, 80, 100);\r\n\t\t            gc.drawImage(cactus, cactusX, 110);\r\n\t\t            lastNanoTime = System.nanoTime();\r\n\t\t        }\r\n\t\t    }\r\n\t\t}.start();\r\n\r\n\t    gameStage.show();\r\n\t}\r\n}\r\n```\r\n\r\nYou may have noticed that the cactus scrolls across the screen... And then doesn't come back! This is because the while loop keeps on subtracting 5 from the x coordinate of the cactus, even into the negatives. This means we need a way to reset the cactus when it reaches the end of the screen. Luckily we can just use an if-else in the while loop to fix this.\r\n\r\n```\r\nwhile (t >= 16666666) {\r\n    if (cactusX <= 30) {\r\n        cactusX = 700;\r\n    } else {\r\n        cactusX -= 5;\r\n    }\r\n    t -= 16666666;\r\n}\r\n```\r\n\r\nNow that we have included the game loop, some of our code has become obsolete. Delete any `gc.drawImage()` or `gc.fillText()` that is NOT in the game loop. i.e. `gc.drawImage(trex, x, y);`\r\n\r\n### The T-Rex and the Cactus become enemies...\r\nNow there's two major features of the game we're missing: the ability to control the t-rex/jump, and the cactus being able to hit the t-rex. Because we don't want to make this a huge tutorial (We could find features to add all day), we'll just add the former feature, as it is much easier to create.\r\n\r\nFirst we need to set up input for the Scene. We can do so by adding the following code directly before the game loop (`AnimationTimer()`):\r\n\r\n```\r\nArrayList<String> input = new ArrayList<String>();\r\n\r\ngameScene.setOnKeyPressed(\r\n    new EventHandler<KeyEvent>() {\r\n        public void handle(KeyEvent e) {\r\n            String code = e.getCode().toString();\r\n                if ( !input.contains(code) )\r\n                    input.add( code );\r\n                }\r\n            });\r\ngameScene.setOnKeyReleased(\r\n    new EventHandler<KeyEvent>() {\r\n        public void handle(KeyEvent e) {\r\n            String code = e.getCode().toString();\r\n            input.remove( code );\r\n        }\r\n            });\r\n```\r\n\r\nThen you also need to add `import java.util.ArrayList;` to the top of your file.\r\n\r\nThis code has set up event handlers to listen for input, but we're not using the input for anything yet. What we want to do is set up the space bar and up arrow key for jumping. Just like we changed the state of the cactus in the game loop, we will also change the state of the t-rex. Since we want the trex moving up and down (y-axis), we will create a variable called trexY (a lot like cactusX), and set it to 100 (the normal position of the t-rex.) Then we will create a boolean trexPeak, which will indicate if the trex has jumped as high as it can/is already on it's way down. Then we need a series of four if statements in order to cover all the possibilities: the trex is on its way up, the trex has reached its max height, the trex has on its way down and the trex has reach the ground. In the end the game loop should look like:\r\n\r\n```\r\nnew AnimationTimer() {\r\n\t\t    long lastNanoTime = System.nanoTime();\r\n\t\t    int cactusX = 800;\r\n\t\t    int trexY = 100;           // Trex ground level\r\n\t\t    boolean trexPeak = false;  // Peak of the trex jump y/n\r\n\t\t    public void handle(long currentNanoTime) {\r\n\t\t        long t = (currentNanoTime - lastNanoTime);\r\n\t\t        if (t >= 16666666) {\r\n\t\t            while (t >= 16666666) {\r\n\r\n\t\t            \tif (input.contains(\"SPACE\") || input.contains(\"UP\") {     // If space or up is pressed\r\n\t\t            \t\tif (!trexPeak && trexY>5) {//Continue up if space is pressed andpeak isn't reached\r\n\t\t            \t\t\ttrexY -= 5;\r\n\t\t            \t\t} else if (!trexPeak && trexY<=5) {//Tell that the trex has peaked\r\n\t\t            \t\t\ttrexPeak = true;\r\n\t\t            \t\t} else if (trexPeak && trexY<100) {//Continue down while space is pressed and not\r\n\t\t            \t\t\ttrexY += 5;                // at ground\r\n\t\t            \t\t} else if (trexPeak && trexY>=100) {//Tell that trex is at ground\r\n\t\t            \t\t\ttrexPeak = false;\r\n\t\t} else {\r\n\t\t    trexY = 100;//Reset to ground when user lifts space or up\r\n\t\t}\r\n\r\n\t\tif (cactusX <= 30) {\r\n\t\t    cactusX = 700;\r\n\t\t} else {\r\n\t\t    cactusX -= 5;\r\n\t\t}\r\n\t\tt -= 16666666;\r\n            }\r\n            gc.clearRect(0, 0, 800, 230);\r\n            gc.fillText(ground, 80, 160);\r\n            gc.drawImage(trex, 80, trexY);\r\n            gc.drawImage(cactus, cactusX, 110);\r\n            lastNanoTime = System.nanoTime();\r\n        }\r\n    }\r\n}.start();\r\n```\r\n\r\n### Hooray! You've made it far!\r\nThe end code should look like:\r\n\r\n```\r\nimport javafx.application.Application;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.FontWeight;\r\nimport javafx.animation.AnimationTimer;\r\nimport javafx.event.EventHandler;\r\nimport javafx.scene.input.KeyEvent;\r\nimport java.util.ArrayList;\r\n\r\npublic class trexRunner extends Application {\r\n\tpublic static void main(String[] args) {\r\n\t\tlaunch(args);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void start(Stage gameStage) {\r\n\t    gameStage.setTitle(\"T-Rex Runner\");\r\n\t    \r\n\t    Group root = new Group();        \r\n\t    Scene gameScene = new Scene(root); \r\n\t    gameStage.setScene(gameScene);     \r\n\r\n\t    Canvas gameCanvas = new Canvas(800, 230);\r\n\t    root.getChildren().add(gameCanvas);\r\n\r\n\t    GraphicsContext gc = gameCanvas.getGraphicsContext2D();      \r\n\t    String ground = \"________________________________________________________________\";\r\n\t    gc.setFill(Color.BLACK);    \r\n\t    gc.setLineWidth(2);                        \r\n\t    Font gameFont = Font.font(\"Times New Roman\", FontWeight.LIGHT, 20);\r\n\t    gc.setFont(gameFont);        \r\n\r\n\t    Image trex = new Image(\"trex.png\");  \r\n\t    Image cactus = new Image(\"cactus.png\");\r\n\r\n\t    ArrayList<String> input = new ArrayList<String>();\r\n\r\n\t    gameScene.setOnKeyPressed(\r\n            new EventHandler<KeyEvent>()\r\n            {\r\n                public void handle(KeyEvent e)\r\n                {\r\n                    String code = e.getCode().toString();\r\n                    if ( !input.contains(code) )\r\n                        input.add( code );\r\n                }\r\n            });\r\n \r\n        gameScene.setOnKeyReleased(\r\n            new EventHandler<KeyEvent>()\r\n            {\r\n                public void handle(KeyEvent e)\r\n                {\r\n                    String code = e.getCode().toString();\r\n                    input.remove( code );\r\n                }\r\n            });\r\n\r\n\t    new AnimationTimer() {\r\n\t\t    long lastNanoTime = System.nanoTime();\r\n\t\t    int cactusX = 800;\r\n\t\t    int trexY = 100;\r\n\t\t    boolean trexPeak = false;\r\n\t\t    public void handle(long currentNanoTime) {\r\n\t\t        long t = (currentNanoTime - lastNanoTime);\r\n\t\t        if (t >= 16666666) {\r\n\t\t            while (t >= 16666666) {\r\n\r\n\t\t            \tif (input.contains(\"SPACE\") || input.contains(\"UP\")) {\r\n\t\t            \t\tif (!trexPeak && trexY>5) {\r\n\t\t            \t\t\ttrexY -= 5;\r\n\t\t            \t\t} else if (!trexPeak && trexY<=5) {\r\n\t\t            \t\t\ttrexPeak = true;\r\n\t\t            \t\t} else if (trexPeak && trexY<100) {\r\n\t\t            \t\t\ttrexY += 5;\r\n\t\t            \t\t} else if (trexPeak && trexY>=100) {\r\n\t\t            \t\t\ttrexPeak = false;\r\n\t\t            \t\t} else {\r\n\t\t            \t\t\tSystem.out.println(\"Error!\");\r\n\t\t            \t\t}\r\n\t\t            \t} else {\r\n\t\t            \t\ttrexY = 100;\r\n\t\t            \t}\r\n\r\n\t\t                if (cactusX <= 30) {\r\n\t\t\t\t\t        cactusX = 700;\r\n\t\t\t\t\t    } else {\r\n\t\t\t\t\t        cactusX -= 5;\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t    t -= 16666666;\r\n\t\t            }\r\n\t\t            gc.clearRect(0, 0, 800, 230);\r\n\t\t            gc.fillText(ground, 80, 160);\r\n\t\t\t    \tgc.drawImage(trex, 80, trexY);\r\n\t\t            gc.drawImage(cactus, cactusX, 110);\r\n\t\t            lastNanoTime = System.nanoTime();\r\n\t\t        }\r\n\t\t    }\r\n\t\t}.start();\r\n\r\n\t    gameStage.show();\r\n\t}\r\n}\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}